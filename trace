1000000001000001   10101001  8041  r a9 - reset 1
1000000001000001   10101001  8041  r a9 - reset 2
1111111111111111   00000000  ffff  r 00 - reset 3
1000000001000001   10101001  8041  r a9 - reset 4
0000000111111011   10101001  01fb  r a9 - reset 5
0000000111111010   10101001  01fa  r a9 - reset 6
0000000111111001   10101001  01f9  r a9 - reset 7
1111111111111100   00000000  fffc  r 00 - read reset vector low byte
1111111111111101   10000000  fffd  r 80 - read reset vector high byte
1000000000000000   10100010  8000  r a2 - ldx
1000000000000001   11111111  8001  r ff - #%ff
1000000000000010   10011010  8002  r 9a - txs
1000000000000011   10101001  8003  r a9 - lda
1000000000000011   10101001  8003  r a9 - lda
1000000000000100   11111111  8004  r ff - #%11111111
1000000000000101   10001101  8005  r 8d - sta
1000000000000110   00000010  8006  r 02 - DDRB low byte
1000000000000111   01100000  8007  r 60 - DDRB high byte
0110000000000010   11111111  6002  W ff - (the write to DDRB)
1000000000001000   10101001  8008  r a9 - lda
1000000000001001   11100000  8009  r e0 - #%11100000
1000000000001010   10001101  800a  r 8d - sta
1000000000001011   00000011  800b  r 03 - DDRA high byte
1000000000001100   01100000  800c  r 60 - DDRA low byte
0110000000000011   11100000  6003  W e0 - (the write to DDR)
1000000000001101   10101001  800d  r a9 - lda
1000000000001110   00111000  800e  r 38 - #%00111000
1000000000001111   00100000  800f  r 20 - jsr
1000000000010000   01100011  8010  r 63 - high byte of lcd_instruction subroutine address
0000000111111111   01100011  01ff  r 63 - read from stack 01ff (63 is wrong)
0000000111111111   10000000  01ff  W 80 - write high byte of return address to stack
0000000111111110   00010001  01fe  W 11 - write low byte of return address to stack
1000000000010001   10000000  8011  r 80 - continue to after jsr instruction (?)
1000000001100011   00100000  8063  r 20 - in lcd_instruction: jsr
1000000001100100   01000000  8064  r 40 - high byte of lcd_wait subroutine
0000000111111101   01000000  01fd  r 40 - read from stack (?) 40 is the wrong value
0000000111111101   10000000  01fd  W 80 - write high byte of return address to stack
0000000111111100   01100101  01fc  W 65 - write low byte of return address to stack
1000000001100101   10000000  8065  r 80 - continue to after jsr instruction (?)
1000000001000000   01001000  8040  r 48 - in lcd_wait: pha
1000000001000001   10101001  8041  r a9 - lda
0000000111111011   00111000  01fb  W 38 - (the write to the stack by pha)
1000000001000001   10101001  8041  r a9 - lda (again)
1000000001000010   00000000  8042  r 00 - #%00000000
1000000001000011   10001101  8043  r 8d - sta
1000000001000100   00000010  8044  r 02 - low byte of DDRB
1000000001000101   01100000  8045  r 60 - high byte of DDRB
0110000000000010   00000000  6002  W 00 - (the write to DDRB)
1000000001000110   10101001  8046  r a9 - lda
1000000001000111   01000000  8047  r 40 - #RW
1000000001001000   10001101  8048  r 8d - sta
1000000001001001   00000001  8049  r 01 - low byte of PORTA
1000000001001010   01100000  804a  r 60 - high byte of PORTA
0110000000000001   01000000  6001  W 40 - (the write to PORTA)
1000000001001011   10101001  804b  r a9 - lda
1000000001001100   11000000  804c  r c0 - #(RW | E)
1000000001001101   10001101  804d  r 8d - sta
1000000001001110   00000001  804e  r 01 - low byte of PORTA
1000000001001111   01100000  804f  r 60 - high byte of PORTA
0110000000000001   11000000  6001  W c0 - (the write to PORTA)
1000000001010000   10101101  8050  r ad - lda
1000000001010001   00000000  8051  r 00 - low byte of PORTB
1000000001010010   01100000  8052  r 60 - high  byte of PORTB
0110000000000000   00000001  6000  r 01 - (the read from PORTB)
1000000001010011   00101001  8053  r 29 - AND
1000000001010100   10000000  8054  r 80 - #%10000000
1000000001010101   11010000  8055  r d0 - bne (54)
1000000001010110   11101111  8056  r ef - distance to lcdbusy
1000000001010111   10101001  8057  r a9 - lda
1000000001011000   01000000  8058  r 40 - #RW
1000000001011001   10001101  8059  r 8d - sta
1000000001011010   00000001  805a  r 01 - low byte of PORTA
1000000001011011   01100000  805b  r 60 - high byte of PORTA
0110000000000001   01000000  6001  W 40 - (the write to PORTA)
1000000001011100   10101001  805c  r a9 - lda
1000000001011101   11111111  805d  r ff - #%11111111
1000000001011110   10001101  805e  r 8d - sta
1000000001011111   00000010  805f  r 02 - low byte of DDRB
1000000001100000   01100000  8060  r 60 - high byte of DDRB
0110000000000010   11111111  6002  W ff - (the write to DDRB)
1000000001100001   01101000  8061  r 68 - pla
1000000001100010   01100000  8062  r 60 - rts
0000000111111010   01100000  01fa  r 60 - read byte of return address from stack (wrong value)
0000000111111011   01100000  01fb  r 60 - read byte of return address from stack (wrong value)
1000000001100010   01100000  8062  r 60 - read rts again?
1000000001100011   00100000  8063  r 20 - jsr (it didn't return? it continues in lcd_instruction?)
0000000111111011   00100000  01fb  r 20 - jsr again?
0000000111111100   00100000  01fc  r 20 - reads return address byte from stack (wrong value)
0000000111111101   00100000  01fd  r 20 - reads return address byte from stack (wrong value)
0010000000100000   00100000  2020  r 20 - jumps to 2020 (wrong address)
0010000000100001   00100000  2021  r 20 - the value it reads remains at 20 after this
0010000000100010   00100000  2022  r 20 -
0000000111111101   00100000  01fd  r 20 -
0000000111111101   00100000  01fd  W 20 - 
